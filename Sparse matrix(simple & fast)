#include <stdio.h>

#define MAX 100

// Structure to represent a sparse matrix element
struct Element {
    int row;
    int col;
    int value;
};

// Structure to represent a sparse matrix
struct SparseMatrix {
    int rows;
    int cols;
    int numElements;
    struct Element data[MAX];
};

// Function to input a sparse matrix
void inputMatrix(struct SparseMatrix *matrix) {
    printf("Enter number of rows and columns: ");
    scanf("%d %d", &matrix->rows, &matrix->cols);

    printf("Enter number of non-zero elements: ");
    scanf("%d", &matrix->numElements);

    printf("Enter non-zero elements (row, column, value):\n");
    for (int i = 0; i < matrix->numElements; ++i) {
        scanf("%d %d %d", &matrix->data[i].row, &matrix->data[i].col, &matrix->data[i].value);
    }
}

// Function to print a sparse matrix
void printMatrix(struct SparseMatrix matrix) {
    printf("Sparse Matrix:\n");
    for (int i = 0; i < matrix.numElements; ++i) {
        printf("%d %d %d\n", matrix.data[i].row, matrix.data[i].col, matrix.data[i].value);
    }
}

// Function to perform simple transpose of a sparse matrix
void simpleTranspose(struct SparseMatrix *matrix) {
    for (int i = 0; i < matrix->numElements; ++i) {
        int temp = matrix->data[i].row;
        matrix->data[i].row = matrix->data[i].col;
        matrix->data[i].col = temp;
    }
}

// Function to perform fast transpose of a sparse matrix
void fastTranspose(struct SparseMatrix *matrix) {
    // Swap rows and columns
    int temp = matrix->rows;
    matrix->rows = matrix->cols;
    matrix->cols = temp;

    // Sort elements based on column
    for (int i = 0; i < matrix->numElements - 1; ++i) {
        for (int j = i + 1; j < matrix->numElements; ++j) {
            if (matrix->data[i].col > matrix->data[j].col) {
                // Swap elements
                struct Element tempElement = matrix->data[i];
                matrix->data[i] = matrix->data[j];
                matrix->data[j] = tempElement;
            }
        }
    }
}

int main() {
    struct SparseMatrix matrix;

    // Input sparse matrix
    inputMatrix(&matrix);

    // Print original matrix
    printMatrix(matrix);

    // Perform simple transpose
    simpleTranspose(&matrix);
    printf("\nSimple Transposed Matrix:\n");
    printMatrix(matrix);

    // Reset matrix for fast transpose
    inputMatrix(&matrix);

    // Perform fast transpose
    fastTranspose(&matrix);
    printf("\nFast Transposed Matrix:\n");
    printMatrix(matrix);

    return 0;
}
