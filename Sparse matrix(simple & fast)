#include<stdio.h>

#define MAX 100

void printMatrix(int matrix[MAX][MAX], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
}


void printSparseMatrix(int sparseMatrix[MAX][3]) {
    for (int i = 0; i < sparseMatrix[0][2]; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d\t", sparseMatrix[i][j]);
        }
        printf("\n");
    }
}

void sparseMatrixRepresentation(int matrix[MAX][MAX], int rows, int cols, int sparseMatrix[MAX][3]) {
    int k = 1;
    sparseMatrix[0][0] = rows;
    sparseMatrix[0][1] = cols;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (matrix[i][j] != 0) {
                sparseMatrix[k][0] = i;
                sparseMatrix[k][1] = j;
                sparseMatrix[k][2] = matrix[i][j];
                k++;
            }
        }
    }

    sparseMatrix[0][2] = k - 1;
}

void simpleTranspose(int sparseMatrix[MAX][3], int transposedMatrix[MAX][3]) {
    for (int i = 0; i <= sparseMatrix[0][2]; i++) {
        transposedMatrix[i][0] = sparseMatrix[i][1];
        transposedMatrix[i][1] = sparseMatrix[i][0];
        transposedMatrix[i][2] = sparseMatrix[i][2];
    }
}

void fastTranspose(int sparseMatrix[MAX][3], int transposedMatrix[MAX][3]) {
    int rowTerms[MAX], startingPos[MAX];
    int i, j;

    for (i = 0; i < sparseMatrix[0][2]; i++) {
        rowTerms[i] = 0;
    }

    for (i = 1; i <= sparseMatrix[0][2]; i++) {
        rowTerms[sparseMatrix[i][1]]++;
    }

    startingPos[0] = 1;

    for (i = 1; i < sparseMatrix[0][2]; i++) {
        startingPos[i] = startingPos[i - 1] + rowTerms[i - 1];
    }

    for (i = 1; i <= sparseMatrix[0][2]; i++) {
        j = startingPos[sparseMatrix[i][1]];
        transposedMatrix[j][0] = sparseMatrix[i][1];
        transposedMatrix[j][1] = sparseMatrix[i][0];
        transposedMatrix[j][2] = sparseMatrix[i][2];
        startingPos[sparseMatrix[i][1]]++;
    }

    transposedMatrix[0][0] = sparseMatrix[0][1];
    transposedMatrix[0][1] = sparseMatrix[0][0];
    transposedMatrix[0][2] = sparseMatrix[0][2];
}

int main() {
    int matrix[MAX][MAX] = {
        {0, 0, 3, 0, 4},
        {0, 0, 5, 7, 0},
        {0, 0, 0, 0, 0},
        {0, 2, 6, 0, 0}
    };

    int rows = 4;
    int cols = 5;

    int sparseMatrix[MAX][3];
    int simpleTransposedMatrix[MAX][3];
    int fastTransposedMatrix[MAX][3];

    printf("Original Matrix:\n");
    printMatrix(matrix, rows, cols);

    sparseMatrixRepresentation(matrix, rows, cols, sparseMatrix);
    printf("\nSparse Matrix Representation:\n");
    printSparseMatrix(sparseMatrix);

    simpleTranspose(sparseMatrix, simpleTransposedMatrix);
    printf("\nSimple Transposed Matrix:\n");
    printSparseMatrix(simpleTransposedMatrix);

    fastTranspose(sparseMatrix, fastTransposedMatrix);
    printf("\nFast Transposed Matrix:\n");
    printSparseMatrix(fastTransposedMatrix);

    return 0;
}
