#include <stdio.h>
#include <stdlib.h>

struct Node
{
    int data;
    struct Node *next;
};

struct Node *createNode(int data)
{
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    if (newNode == NULL)
    {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void display(struct Node *head)
{
    struct Node *current = head;
    if (current == NULL)
    {
        printf("The list is empty.\n");
        return;
    }
    printf("Linked List: ");
    while (current != NULL)
    {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

struct Node *insertEnd(struct Node *head, int data)
{
    struct Node *newNode = createNode(data);
    if (head == NULL)
    {
        return newNode;
    }
    struct Node *current = head;
    while (current->next != NULL)
    {
        current = current->next;
    }
    current->next = newNode;
    return head;
}

struct Node *deleteNode(struct Node *head, int key)
{
    if (head == NULL)
    {
        printf("The list is empty.\n");
        return NULL;
    }
    if (head->data == key)
    {
        struct Node *temp = head;
        head = head->next;
        free(temp);
        printf("Node with data %d deleted.\n", key);
        return head;
    }
    struct Node *current = head;
    while (current->next != NULL && current->next->data != key)
    {
        current = current->next;
    }
    if (current->next == NULL)
    {
        printf("Node with data %d not found.\n", key);
        return head;
    }
    struct Node *temp = current->next;
    current->next = current->next->next;
    free(temp);
    printf("Node with data %d deleted.\n", key);
    return head;
}

struct Node *reverseList(struct Node *head)
{
    struct Node *prev = NULL;
    struct Node *current = head;
    struct Node *next = NULL;
    while (current != NULL)
    {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}

void search(struct Node *head, int key)
{
    struct Node *current = head;
    int position = 1;
    while (current != NULL)
    {
        if (current->data == key)
        {
            printf("Element %d found at position %d.\n", key, position);
            return;
        }
        current = current->next;
        position++;
    }
    printf("Element %d not found in the list.\n", key);
}

int countElements(struct Node *head)
{
    struct Node *current = head;
    int count = 0;
    while (current != NULL)
    {
        count++;
        current = current->next;
    }
    return count;
}

int main()
{
    struct Node *head = NULL;
    int choice, data, key;
    while (1)
    {
        printf("--------------------------------------------------\nLinked List Operations Menu:\n");
        printf("1. Create\n");
        printf("2. Display\n");
        printf("3. Insert at the end\n");
        printf("4. Delete\n");
        printf("5. Reverse\n");
        printf("6. Search\n");
        printf("7. Count Elements\n");
        printf("8. Exit\n");
        printf("---------------------------------------------------\nEnter your choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("Enter data to create a node: ");
            scanf("%d", &data);
            head = insertEnd(head, data);
            break;
        case 2:
            display(head);
            break;
        case 3:
            printf("Enter data to insert at the end: ");
            scanf("%d", &data);
            head = insertEnd(head, data);
            break;
        case 4:
            printf("Enter data to delete: ");
            scanf("%d", &key);
            head = deleteNode(head, key);
            break;
        case 5:
            head = reverseList(head);
            printf("Linked list reversed.\n");
            break;
        case 6:
            printf("Enter element to search: ");
            scanf("%d", &key);
            search(head, key);
            break;
        case 7:
            printf("Number of elements in the linked list: %d\n", countElements(head));
            break;
        case 8:
            printf("Exiting program.\n");
            exit(0);
        default:
            printf("Invalid choice. Please enter a valid option.\n");
        }
    }
    return 0;
}
